/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.excel.javafx.frames;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author harsimran
 */
public class FolderCompare extends javax.swing.JFrame {

    /**
     * Creates new form FolderCompare
     */
    
    private File sourceFolder=null;
    private File destFolder=null;
    private File sourceFiles[]=null;
    private File destFiles[]=null;
    private StyledDocument doc=null;
    private Style stylered,styleblack=null;
    private List<String> rows,cell,expected,actual,result=null;
    private int rowsreport=0;
    private int columnsreport=0;
    private int sourcerowcount=0;
    private int destrowcount=0;
    
    public FolderCompare() {
        initComponents();
        doc = results.getStyledDocument();
        stylered= results.addStyle("Error sytle", null);
        styleblack=results.addStyle("Match sytle", null);
        StyleConstants.setForeground(stylered, Color.red);
        StyleConstants.setForeground(styleblack, Color.black);  // set the black and red 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SourceBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        destFileList = new javax.swing.JList<>();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CompareBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        results = new javax.swing.JTextPane();
        DestinationBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sourceFileList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        SourceBtn.setText("Choose folder...");
        SourceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceBtnActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(destFileList);

        jButton3.setText("Compare File");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Destination File");

        jLabel3.setText("File Filter");

        jLabel5.setText("File Filter");

        CompareBtn.setText("Compare");
        CompareBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompareBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(results);

        DestinationBtn.setText("Choose folder...");
        DestinationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DestinationBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Excel Comparison Tool");

        jScrollPane2.setViewportView(sourceFileList);

        jLabel1.setText("Source File");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(CompareBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(SourceBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(DestinationBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(77, 77, 77)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 52, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SourceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DestinationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(60, 60, 60)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(CompareBtn)
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SourceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceBtnActionPerformed
       //select the source folder
        
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            sourceFolder= fileChooser.getCurrentDirectory();
            getSourceFiles();
            System.out.print(sourceFolder);
        }
    }//GEN-LAST:event_SourceBtnActionPerformed

    private void getSourceFiles(){
    //populate all the source files in the list
    File[] listOfFiles = sourceFolder.listFiles();
    final DefaultListModel model = new DefaultListModel();
        sourceFileList.setModel(model);
        for(int fileCount=0;fileCount<listOfFiles.length;fileCount++){
         model.addElement(listOfFiles[fileCount].getName());
        }
    }
    
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
      //open file comparison frame and close current
        this.dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void CompareBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompareBtnActionPerformed
    //compare selected files from the list
        try {
            rowsreport=0;
            rows=new ArrayList<String>();
            cell=new ArrayList<String>();
            expected=new ArrayList<String>();
            actual=new ArrayList<String>();
            result=new ArrayList<String>();
            List<String> sourceFiles=new ArrayList<String>();
            List<String> destFiles=new ArrayList<String>();
            results.setText("");
            // get input excel files
            int sourceFilesSelected[]=sourceFileList.getSelectedIndices();
            int destFilesSelected[]=destFileList.getSelectedIndices();
            
        for(int filecount=0;filecount<sourceFilesSelected.length;filecount++){
            sourceFiles=sourceFileList.getSelectedValuesList();
            destFiles=destFileList.getSelectedValuesList();
            String filename=sourceFolder.toString()+sourceFiles.get(filecount);
            
            FileInputStream sourceFile = new FileInputStream(sourceFolder.toString()+"\\"+sourceFiles.get(filecount));
            FileInputStream destFile = new FileInputStream(destFolder.toString()+"\\"+destFiles.get(filecount));

            // Create Workbook instance holding reference to .xlsx file
            XSSFWorkbook sourcebook = new XSSFWorkbook(sourceFile);
            XSSFWorkbook destbook = new XSSFWorkbook(destFile);

            // Get first/desired sheet from the workbook
            XSSFSheet sourceSheet = sourcebook.getSheetAt(0);
            XSSFSheet destSheet = destbook.getSheetAt(0);
         
            // Compare sheets
            if(compareTwoSheets(sourceSheet, destSheet)) {
                System.out.println("\n\nThe two excel sheets are Equal");
                doc.insertString(doc.getLength(), "The two excel sheets are Equal",styleblack);
                doc.insertString(doc.getLength(), "\n", null );
            } else {
                System.out.println("\n\nThe two excel sheets are Not Equal");
                doc.insertString(doc.getLength(), " The two excel sheets are Not Equal",stylered);
                doc.insertString(doc.getLength(), "\n", null );
            }

           // close files
            sourceFile.close();
            destFile.close();
            
            excelReport();
        }
          } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_CompareBtnActionPerformed
    //compare source and destination sheets
    public  boolean compareTwoSheets(XSSFSheet sheet1, XSSFSheet sheet2) {
        
        int firstRow1 = sheet1.getFirstRowNum()+1;
        int firstRow2 = sheet2.getFirstRowNum()+1;
        int lastRow1 = sheet1.getPhysicalNumberOfRows();
        int lastRow2 = sheet2.getPhysicalNumberOfRows();
        
        boolean equalSheets = true;
        sourcerowcount=lastRow1-firstRow1;
        destrowcount=lastRow2-firstRow2;
        if(!(lastRow1==lastRow2)){
            try {
                equalSheets=false;
                doc.insertString(doc.getLength(), " Row count is different",stylered);
                doc.insertString(doc.getLength(), "\n", null );
                doc.insertString(doc.getLength(), "Source sheet row count= "+lastRow1+"    **Dest sheet row count= "+lastRow2,stylered);
                doc.insertString(doc.getLength(), "\n", null );
            } catch (BadLocationException ex) {
                Logger.getLogger(FolderCompare.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
                for(int i=firstRow1; i < lastRow1; i++) {

                    System.out.println("\n\nComparing Row "+i);

                    XSSFRow row1 = sheet1.getRow(i);
                    XSSFRow row2 = sheet2.getRow(i);
                    
                    rows.add("Row "+i);   //add rows
                    
                    if(!compareTwoRows(row1, row2)) {
                        try {
                            equalSheets = false;
                            System.out.println("Row "+i+" - Not Equal");
                            doc.insertString(doc.getLength(), " Row "+i+" -Not Equal ",stylered);
                            doc.insertString(doc.getLength(), "\n", null );

                        } catch (BadLocationException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        try {
                            System.out.println("Row "+i+" - Equal");
                            doc.insertString(doc.getLength(), " Row "+i+" -Equal ",styleblack);
                            doc.insertString(doc.getLength(), "\n", null );
                        } catch (BadLocationException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        return equalSheets;
    }

    // Compare Two Rows
    public  boolean compareTwoRows(XSSFRow row1, XSSFRow row2) {
       
        
        if((row1 == null) && (row2 == null)) {
            return true;
        } else if((row1 == null) || (row2 == null)) {
            return false;
        }
        
       
        boolean equalRows = true;
        
        // Compare all cells in a row
        //for(int i=firstCell1; i <= lastCell1; i++) {
            int columnCount=row1.getPhysicalNumberOfCells();
            
          for(int count=0;count<columnCount;count++){  
            XSSFCell cell1 = row1.getCell(count);
            XSSFCell cell2 = row2.getCell(count);
            if(!compareTwoCells(cell1, cell2)) {
                try {
                    equalRows = false;
                    cell1.setCellType(HSSFCell.CELL_TYPE_STRING);
                    cell2.setCellType(HSSFCell.CELL_TYPE_STRING);
                    
                    System.err.println("       Cell "+count+" "+cell1.getStringCellValue()+" - NOt Equal");
                    System.err.println("       Cell "+count+" "+cell2.getStringCellValue()+" - NOt Equal");
                    doc.insertString(doc.getLength(), " Cell "+count+"**Expected Value= "+cell1.getStringCellValue(),stylered);
                    doc.insertString(doc.getLength(),"  **Actual Value= "+cell2.getStringCellValue()+" - Not Equal",stylered);
                    doc.insertString(doc.getLength(), "\n", null );
                    cell.add("Cell "+count);
                    expected.add(cell1.getStringCellValue());
                    actual.add(cell2.getStringCellValue());
                    result.add("Not Equal");
                } catch (BadLocationException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    doc.insertString(doc.getLength(), " Cell "+count+"**Expected Value= "+cell1.getStringCellValue(),styleblack);
                    doc.insertString(doc.getLength(),"  **Actual Value= "+cell2.getStringCellValue()+" - Equal",styleblack);
                    doc.insertString(doc.getLength(), "\n", null );
                    cell.add("Cell "+count);
                    expected.add(cell1.getStringCellValue());
                    actual.add(cell2.getStringCellValue());
                    result.add("Equal");
                } catch (BadLocationException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                    System.out.println("       Cell "+count+" "+cell2+" - Equal");
            }
        }
        return equalRows;
    }
    
    // Compare Two Cells
    public static boolean compareTwoCells(XSSFCell cell1, XSSFCell cell2) {
        if((cell1 == null) && (cell2 == null)) {
            return true;
        } else if((cell1 == null) || (cell2 == null)) {
            return false;
        }
        
        boolean equalCells = false;
        int type1 = cell1.getCellType();
        int type2 = cell2.getCellType();
        if (type1 == type2) {
            if (cell1.getCellStyle().equals(cell2.getCellStyle())) {
                // Compare cells based on its type
                switch (cell1.getCellType()) {
                case HSSFCell.CELL_TYPE_FORMULA:
                    if (cell1.getCellFormula().equals(cell2.getCellFormula())) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_NUMERIC:
                    if (cell1.getNumericCellValue() == cell2
                            .getNumericCellValue()) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_STRING:
                    if (cell1.getStringCellValue().equals(cell2
                            .getStringCellValue())) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_BLANK:
                    if (cell2.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_BOOLEAN:
                    if (cell1.getBooleanCellValue() == cell2
                            .getBooleanCellValue()) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_ERROR:
                    if (cell1.getErrorCellValue() == cell2.getErrorCellValue()) {
                        equalCells = true;
                    }
                    break;
                default:
                    if (cell1.getStringCellValue().equals(
                            cell2.getStringCellValue())) {
                        equalCells = true;
                    }
                    break;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
        return equalCells;
    }
    
    
    
    
    
    
    
    
    private void DestinationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DestinationBtnActionPerformed
      //select the destination folder 
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            destFolder= fileChooser.getCurrentDirectory();
            getDestFiles();
            System.out.print(destFolder);
        }
    }//GEN-LAST:event_DestinationBtnActionPerformed

    
    private void getDestFiles(){
    //select destination files from the selcted destination folder    
    File[] listOfFiles = destFolder.listFiles();
    final DefaultListModel model = new DefaultListModel();
        destFileList.setModel(model);
        for(int fileCount=0;fileCount<listOfFiles.length;fileCount++){
         model.addElement(listOfFiles[fileCount].getName());
        }
    }
    
    public void excelReport(){
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Comparison Results");
        List<String> sourceFiles=sourceFileList.getSelectedValuesList();
        List<String> sourceFilesUpdated=new ArrayList<String>();
        List<String> destFiles=destFileList.getSelectedValuesList();
        List<String> destFilesUpdated=new ArrayList<String>();
        List<String> sourceRows=rows;
        List<String> sourceRowsUpdated=new ArrayList<String>();
        XSSFRow row=sheet.createRow(0); //headers
        XSSFCell cell1=row.createCell(0);XSSFCell cell2=row.createCell(1);XSSFCell cell3=row.createCell(2);XSSFCell cell4=row.createCell(3);
        XSSFCell cell5=row.createCell(4);XSSFCell cell6=row.createCell(5);XSSFCell cell7=row.createCell(6);
        cell1.setCellValue("Source File");cell2.setCellValue("Dest File");
        cell3.setCellValue("Row number");cell4.setCellValue("Cell number");
        cell5.setCellValue("Expected Value");cell6.setCellValue("Actual Value");cell7.setCellValue("Result");
        
        //populate source Files selected
        for(int i=0;i<sourceFileList.getSelectedValuesList().size();i++){
           
            for(int j=0;j<sourcerowcount;j++){
                 
                 sourceFilesUpdated.add(sourceFiles.get(i));
             }
            
        }
        
        //populate dest files selected
         for(int i=0;i<destFileList.getSelectedValuesList().size();i++){
            for(int j=0;j<destrowcount;j++){
               
                 destFilesUpdated.add(destFiles.get(i));
             }
        }
         
         //populate rows
         for(int i=0;i<destrowcount;i++){
            for(int j=0;j<sourceRows.size();j++){
                
                 sourceRowsUpdated.add(sourceRows.get(i));
             }
        }
         
         //updateReport
        for(int rowcount=1;rowcount<=rows.size();rowcount++){
             row=sheet.createRow(rowcount);
             XSSFCell cellvalue1=row.createCell(0);XSSFCell cellvalue2=row.createCell(1);XSSFCell cellvalue3=row.createCell(2);
             XSSFCell cellvalue4=row.createCell(3);XSSFCell cellvalue5=row.createCell(4);XSSFCell cellvalue6=row.createCell(5);
             XSSFCell cellvalue7=row.createCell(6);
             
             
             cellvalue1.setCellValue(sourceFilesUpdated.get(rowcount-1));
             cellvalue2.setCellValue(destFilesUpdated.get(rowcount-1));
             cellvalue3.setCellValue(sourceRowsUpdated.get(rowcount-1));
             cellvalue4.setCellValue(cell.get(rowcount-1));
             cellvalue5.setCellValue(expected.get(rowcount-1));
             cellvalue6.setCellValue(actual.get(rowcount-1));
             cellvalue7.setCellValue(result.get(rowcount-1));
        }
        try (FileOutputStream outputStream = new FileOutputStream("report/report.xlsx")) {
        //    workbook.write(outputStream);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FolderCompare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FolderCompare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FolderCompare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FolderCompare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FolderCompare().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CompareBtn;
    private javax.swing.JButton DestinationBtn;
    private javax.swing.JButton SourceBtn;
    private javax.swing.JList<String> destFileList;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane results;
    private javax.swing.JList<String> sourceFileList;
    // End of variables declaration//GEN-END:variables
}
