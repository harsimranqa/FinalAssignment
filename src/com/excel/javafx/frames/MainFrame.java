/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.excel.javafx.frames;

import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author harsimran
 */
public class MainFrame extends javax.swing.JFrame {

   
    public File sourceFileName=null;
    public File destFileName=null;
    private StyledDocument doc=null;
    private Style stylered,styleblack=null;
    private List<String> rows,cell,expected,actual,result=null;
    private int rowsreport=0;
    private int columnsreport=0;
    private int sourcerowcount=0;
    private int destrowcount=0;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        doc = results.getStyledDocument();

        stylered= results.addStyle("Error sytle", null);
        styleblack=results.addStyle("Match sytle", null);
        StyleConstants.setForeground(stylered, Color.red);
        StyleConstants.setForeground(styleblack, Color.black);      //setting red and black color for text
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DestinationBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        SourceBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        destSheetSelector = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        sourceSheetSelector = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        CompareBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        sourceColumnList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        destColumnList = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        results = new javax.swing.JTextPane();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        DestinationBtn.setText("Choose file...");
        DestinationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DestinationBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Excel Comparison Tool");

        jLabel1.setText("Source File");

        SourceBtn.setText("Choose file...");
        SourceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Destination File");

        destSheetSelector.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                destSheetSelectorItemStateChanged(evt);
            }
        });

        jLabel3.setText("Sheet Filter");

        sourceSheetSelector.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sourceSheetSelectorItemStateChanged(evt);
            }
        });
        sourceSheetSelector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sourceSheetSelectorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sourceSheetSelectorMouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sourceSheetSelectorMouseReleased(evt);
            }
        });
        sourceSheetSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceSheetSelectorActionPerformed(evt);
            }
        });

        jLabel5.setText("Sheet Filter");

        CompareBtn.setText("Compare");
        CompareBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompareBtnActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(sourceColumnList);

        jScrollPane3.setViewportView(destColumnList);

        jButton1.setText("Show Columns");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show Columns");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(results);

        jButton3.setText("Compare Folder");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Open excel Report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(CompareBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(SourceBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(sourceSheetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(destSheetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(DestinationBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(jButton4)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 53, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(233, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SourceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sourceSheetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(CompareBtn)
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(DestinationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(destSheetSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DestinationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DestinationBtnActionPerformed
       //select destination files and populate sheets in the list
        
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            destFileName= fileChooser.getSelectedFile();
            getDestinationFileHeaders(destFileName);
            System.out.print(destFileName.getName());
        }
    }//GEN-LAST:event_DestinationBtnActionPerformed

    private void SourceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceBtnActionPerformed
        //select source files and populate sheets in the list
        
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            sourceFileName= fileChooser.getSelectedFile();
            getSourceFileHeaders(sourceFileName);
            System.out.print(sourceFileName.getName());
        }
    }//GEN-LAST:event_SourceBtnActionPerformed

    private void getSourceFileHeaders(File file){
      //fill the column names for selection
        try {
            FileInputStream sourceFile1 = new FileInputStream(file);
            XSSFWorkbook workbook1 = new XSSFWorkbook(sourceFile1);
            sourceSheetSelector.removeAllItems();    //to clear existing headers
            for(int sheetno=0;sheetno<workbook1.getNumberOfSheets();sheetno++){
                sourceSheetSelector.addItem(workbook1.getSheetName(sheetno));
            }
            //sourceColumnSelector();     // to fill columnSelection
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getDestinationFileHeaders(File file){
      //fill the column names for selection
        try {
            FileInputStream destFile = new FileInputStream(file);
            XSSFWorkbook workbook1 = new XSSFWorkbook(destFile);
            destSheetSelector.removeAllItems();    //to clear existing headers
            
            for(int sheetno=0;sheetno<workbook1.getNumberOfSheets();sheetno++){
                destSheetSelector.addItem(workbook1.getSheetName(sheetno));
            }
            //destinationColumnSelector();     // to fill columnSelection
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
    private void CompareBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompareBtnActionPerformed
       //compare the 2 excel sheets
        
        try {
            rowsreport=0;
            columnsreport=sourceColumnList.getSelectedIndices().length;
            rows=new ArrayList<String>();
            cell=new ArrayList<String>();
            expected=new ArrayList<String>();
            actual=new ArrayList<String>();
            result=new ArrayList<String>();
            results.setText("");    //blank the results testarea
            // get input excel files
            FileInputStream sourceFile = new FileInputStream(sourceFileName);
            FileInputStream destFile = new FileInputStream(destFileName);

            // Create Workbook instance holding reference to .xlsx file
            XSSFWorkbook sourcebook = new XSSFWorkbook(sourceFile);
            XSSFWorkbook destbook = new XSSFWorkbook(destFile);

            // Get first/desired sheet from the workbook
            XSSFSheet sourceSheet = sourcebook.getSheet(sourceSheetSelector.getSelectedItem().toString());
            XSSFSheet destSheet = destbook.getSheet(destSheetSelector.getSelectedItem().toString());
            
            // Compare sheets
            if(compareTwoSheets(sourceSheet, destSheet)) {
                System.out.println("\n\nThe two excel sheets are Equal");
            } else {
                System.out.println("\n\nThe two excel sheets are Not Equal");
            }
            
            
            //close files
            sourceFile.close();
            destFile.close();
            
            excelReport();

            
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_CompareBtnActionPerformed

    private void sourceColumnSelector(){
        FileInputStream sourceFile1 = null;
        final DefaultListModel model = new DefaultListModel();
        

        try {
            sourceFile1 = new FileInputStream(sourceFileName);
            XSSFWorkbook workbook1 = new XSSFWorkbook(sourceFile1);
            XSSFSheet sheet=workbook1.getSheet(sourceSheetSelector.getSelectedItem().toString());
            int columncount=sheet.getRow(0).getLastCellNum();
            
            for(int columnno=0;columnno<columncount;columnno++){
                model.addElement(sheet.getRow(0).getCell(columnno).toString());
            }
            sourceColumnList.setModel(model);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                sourceFile1.close();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void destinationColumnSelector(){
        FileInputStream destFile1 = null;
        final DefaultListModel model = new DefaultListModel();
        

        try {
            destFile1 = new FileInputStream(destFileName);
            XSSFWorkbook workbook1 = new XSSFWorkbook(destFile1);
            XSSFSheet sheet=workbook1.getSheet(destSheetSelector.getSelectedItem().toString());
            int columncount=sheet.getRow(0).getLastCellNum();
            
            for(int columnno=0;columnno<columncount;columnno++){
                model.addElement(sheet.getRow(0).getCell(columnno).toString());
            }
            destColumnList.setModel(model);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                destFile1.close();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void sourceSheetSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceSheetSelectorActionPerformed
        
    }//GEN-LAST:event_sourceSheetSelectorActionPerformed

    private void sourceSheetSelectorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sourceSheetSelectorItemStateChanged
        // TODO add your handling code here:
      
    }//GEN-LAST:event_sourceSheetSelectorItemStateChanged

    private void sourceSheetSelectorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sourceSheetSelectorMouseReleased
        // TODO add your handling code here:
         
        
    }//GEN-LAST:event_sourceSheetSelectorMouseReleased

    private void sourceSheetSelectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sourceSheetSelectorMouseClicked
        // TODO add your handling code here:
       // sourcecount++;
    }//GEN-LAST:event_sourceSheetSelectorMouseClicked

    private void sourceSheetSelectorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sourceSheetSelectorMouseEntered
        // TODO add your handling code here:
        
    }//GEN-LAST:event_sourceSheetSelectorMouseEntered

    private void destSheetSelectorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_destSheetSelectorItemStateChanged
       
    }//GEN-LAST:event_destSheetSelectorItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        sourceColumnSelector();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         destinationColumnSelector();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new FolderCompare().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
           // Runtime.getRuntime().exec("report/report.xlsx");
            
            Desktop.getDesktop().open(new File("report\\report.xlsx"));
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

     // Compare Two Sheets
    public  boolean compareTwoSheets(XSSFSheet sheet1, XSSFSheet sheet2) {
        
    //compare 2 sheets of the source and destination workbooks  
        int firstRow1 = sheet1.getFirstRowNum()+1;
        int firstRow2 = sheet2.getFirstRowNum()+1;
        int lastRow1 = sheet1.getPhysicalNumberOfRows();
        int lastRow2=sheet2.getPhysicalNumberOfRows();
        sourcerowcount=lastRow1-firstRow1;
        destrowcount=lastRow2-firstRow2;
        boolean equalSheets = true;
        if(!(lastRow1==lastRow2)){
            try {
                equalSheets=false;
                doc.insertString(doc.getLength(), " Row count is different",stylered);
                doc.insertString(doc.getLength(), "\n", null );
                doc.insertString(doc.getLength(), "Source sheet row count= "+lastRow1+"    **Dest sheet row count= "+lastRow2,stylered);
                doc.insertString(doc.getLength(), "\n", null );
            } catch (BadLocationException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
       
                for(int i=firstRow1; i <lastRow1; i++) {

                    System.out.println("\n\nComparing Row "+i);

                    XSSFRow row1 = sheet1.getRow(i);
                    XSSFRow row2 = sheet2.getRow(i);
                    if(!compareTwoRows(row1, row2)) {
                        try {
                            equalSheets = false;
                            System.out.println("Row "+i+" - Not Equal");
                            doc.insertString(doc.getLength(), " Row "+i+" -Not Equal ",stylered);
                            doc.insertString(doc.getLength(), "\n", null );
                            for(int j=0;j<columnsreport;j++){
                                rows.add("Row "+i);
                            }
                         //   result.add("Not Equal");
                        } catch (BadLocationException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        try {
                            System.out.println("Row "+i+" - Equal");
                            doc.insertString(doc.getLength(), " Row "+i+" -Equal ",styleblack);
                            doc.insertString(doc.getLength(), "\n", null );
                            for(int j=0;j<columnsreport;j++){
                                rows.add("Row "+i);
                            }
                       //     result.add("Equal");
                        } catch (BadLocationException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                 
        return equalSheets;
    }

    // Compare Two Rows
    public  boolean compareTwoRows(XSSFRow row1, XSSFRow row2) {
       
        
        if((row1 == null) && (row2 == null)) {
            return true;
        } else if((row1 == null) || (row2 == null)) {
            return false;
        }
        
       
        boolean equalRows = true;
        
        // Compare all cells in a row
        
            int srccolumnSelected[]=sourceColumnList.getSelectedIndices();
            int destcolumnSelected[]=destColumnList.getSelectedIndices();
          for(int columncount=0;columncount<srccolumnSelected.length;columncount++){  
            XSSFCell cell1 = row1.getCell(srccolumnSelected[columncount]);
            XSSFCell cell2 = row2.getCell(destcolumnSelected[columncount]);
            rowsreport++;
            if(!compareTwoCells(cell1, cell2)) {
                try {
                    
                    equalRows = false;
                    cell1.setCellType(HSSFCell.CELL_TYPE_STRING);
                    cell2.setCellType(HSSFCell.CELL_TYPE_STRING);
                    
                    System.err.println("       Cell "+srccolumnSelected[columncount]+" "+cell1.getStringCellValue()+" - NOt Equal");
                    System.err.println("       Cell "+destcolumnSelected[columncount]+" "+cell2.getStringCellValue()+" - NOt Equal");
                    doc.insertString(doc.getLength(), " Cell "+srccolumnSelected[columncount]+"**Expected Value= "+cell1.getStringCellValue(),stylered);
                    doc.insertString(doc.getLength(),"  **Actual Value= "+cell2.getStringCellValue()+" - Not Equal",stylered);
                    doc.insertString(doc.getLength(), "\n", null );
                    cell.add("Cell "+srccolumnSelected[columncount]);
                    expected.add(cell1.getStringCellValue());
                    actual.add(cell2.getStringCellValue());
                    result.add("Not Equal");
                } catch (BadLocationException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    doc.insertString(doc.getLength(), " Cell "+srccolumnSelected[columncount]+"**Expected Value= "+cell1.getStringCellValue(),styleblack);
                    doc.insertString(doc.getLength(),"  **Actual Value= "+cell2.getStringCellValue()+" - Equal",styleblack);
                    doc.insertString(doc.getLength(), "\n", null );
                    cell.add("Cell "+srccolumnSelected[columncount]);
                    expected.add(cell1.getStringCellValue());
                    actual.add(cell2.getStringCellValue());
                    result.add("Equal");
                } catch (BadLocationException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                    System.out.println("       Cell "+columncount+" "+cell2+" - Equal");
            }
        }
        return equalRows;
    }
    
    // Compare Two Cells
    public static boolean compareTwoCells(XSSFCell cell1, XSSFCell cell2) {
        if((cell1 == null) && (cell2 == null)) {
            return true;
        } else if((cell1 == null) || (cell2 == null)) {
            return false;
        }
        
        boolean equalCells = false;
        int type1 = cell1.getCellType();
        int type2 = cell2.getCellType();
        if (type1 == type2) {
            if (cell1.getCellStyle().equals(cell2.getCellStyle())) {
                // Compare cells based on its type
                switch (cell1.getCellType()) {
                case HSSFCell.CELL_TYPE_FORMULA:
                    if (cell1.getCellFormula().equals(cell2.getCellFormula())) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_NUMERIC:
                    if (cell1.getNumericCellValue() == cell2
                            .getNumericCellValue()) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_STRING:
                    if (cell1.getStringCellValue().equals(cell2
                            .getStringCellValue())) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_BLANK:
                    if (cell2.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_BOOLEAN:
                    if (cell1.getBooleanCellValue() == cell2
                            .getBooleanCellValue()) {
                        equalCells = true;
                    }
                    break;
                case HSSFCell.CELL_TYPE_ERROR:
                    if (cell1.getErrorCellValue() == cell2.getErrorCellValue()) {
                        equalCells = true;
                    }
                    break;
                default:
                    if (cell1.getStringCellValue().equals(
                            cell2.getStringCellValue())) {
                        equalCells = true;
                    }
                    break;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
        return equalCells;
    }
    
    public void excelReport(){
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Comparison Results");
        XSSFRow row=sheet.createRow(0); //headers
        XSSFCell cell1=row.createCell(0);XSSFCell cell2=row.createCell(1);XSSFCell cell3=row.createCell(2);XSSFCell cell4=row.createCell(3);
        XSSFCell cell5=row.createCell(4);XSSFCell cell6=row.createCell(5);XSSFCell cell7=row.createCell(6);XSSFCell cell8=row.createCell(7);
        XSSFCell cell9=row.createCell(8);XSSFCell cell10=row.createCell(9);XSSFCell cell11=row.createCell(10);
        cell1.setCellValue("Source File");cell2.setCellValue("Dest File");cell3.setCellValue("Source Sheet");cell4.setCellValue("Dest Sheet");
        cell5.setCellValue("Row number");cell6.setCellValue("Source Columns");cell7.setCellValue("Dest Columns");cell8.setCellValue("Cell number");
        cell9.setCellValue("Expected Value");cell10.setCellValue("Actual Value");cell11.setCellValue("Result");
        
        for(int rowcount=1;rowcount<=expected.size();rowcount++){
             row=sheet.createRow(rowcount);
             XSSFCell cellvalue1=row.createCell(0);XSSFCell cellvalue2=row.createCell(1);XSSFCell cellvalue3=row.createCell(2);
             XSSFCell cellvalue4=row.createCell(3);XSSFCell cellvalue5=row.createCell(4);XSSFCell cellvalue6=row.createCell(5);
             XSSFCell cellvalue7=row.createCell(6);XSSFCell cellvalue8=row.createCell(7);XSSFCell cellvalue9=row.createCell(8);
             XSSFCell cellvalue10=row.createCell(9);XSSFCell cellvalue11=row.createCell(10);
             cellvalue1.setCellValue(sourceFileName.getName());
             cellvalue2.setCellValue(destFileName.getName());
             cellvalue3.setCellValue(sourceSheetSelector.getSelectedItem().toString());
             cellvalue4.setCellValue(destSheetSelector.getSelectedItem().toString());
             
             if(rowcount-1<rows.size()){
                 cellvalue5.setCellValue(rows.get(rowcount-1));
             }
             List<String>sourcecolumns=sourceColumnList.getSelectedValuesList();
             List<String>sourcecolumnsupdated=new ArrayList<String>();
             for(int i=0;i<sourcecolumns.size();i++){
                 for(int j=0;j<sourcerowcount;j++){
                     sourcecolumnsupdated.add(sourcecolumns.get(i));
                 }
             }
             
             List<String>destcolumns=destColumnList.getSelectedValuesList();
             List<String>destcolumnsupdated=new ArrayList<String>();
             for(int i=0;i<destcolumns.size();i++){
                 for(int j=0;j<destrowcount;j++){
                     destcolumnsupdated.add(destcolumns.get(i));
                 }
             }
             if(rowcount-1<sourcecolumnsupdated.size()){
                 cellvalue6.setCellValue(sourcecolumnsupdated.get(rowcount-1));
             }
             if(rowcount-1<destcolumnsupdated.size()){
                 cellvalue7.setCellValue(destcolumnsupdated.get(rowcount-1));
             }
             if(rowcount-1<cell.size()){
                 cellvalue8.setCellValue(cell.get(rowcount-1));
             }
             if(rowcount-1<expected.size()){
                 cellvalue9.setCellValue(expected.get(rowcount-1));
             }
             if(rowcount-1<actual.size()){
                 cellvalue10.setCellValue(actual.get(rowcount-1));
             }
             if(rowcount-1<result.size()){
                 cellvalue11.setCellValue(result.get(rowcount-1));
             }
        }
        try (FileOutputStream outputStream = new FileOutputStream("report/report.xlsx")) {
            workbook.write(outputStream);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CompareBtn;
    private javax.swing.JButton DestinationBtn;
    private javax.swing.JButton SourceBtn;
    private javax.swing.JList<String> destColumnList;
    private javax.swing.JComboBox<String> destSheetSelector;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane results;
    private javax.swing.JList<String> sourceColumnList;
    private javax.swing.JComboBox<String> sourceSheetSelector;
    // End of variables declaration//GEN-END:variables
}
